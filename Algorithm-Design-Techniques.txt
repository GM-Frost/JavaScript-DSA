Brute Force: simple and exhaustive technique that evaluates every possible outcome to find the best solution: Ex: Linear Search

Greedy: Choose the best option at the current time, without any consideration for the future. Ex: Dijkstra's algorithm, Prims algorithm and Kruskal's algorithm 

Divide and Conquer: Divide the problem into smaller sub-problems. Each sub-problem is then solved and the partial solutions are recombined to determine the overall solution. Ex: Binary Search, Quick Sort, Merge Sort and Tower of Hanoi.

Dynamic Programming: Similar to Divide and conquer. Divide the problem into smaller sub-problems. Break it down into smaller but overlapping sub problems. Store the result and reuse it for the same sub-problems. This is called memoization and is a optimization technique that improves the time complexity of your algorithm. Ex: Fibonacci numbers and climbing staircase

Backtracking: Generate all possible solutions. Check if the solution satisfies all the given contrains and only then you proceed with generating subsequent solutions. If thee constraints are not satisfied, backtrack and ago on a different path to find the solution. EX: N-Queens Problem


// BIG O in Datastructure


// Map, filter, concat, slice and spice


// Insert /remove from end - O(1) -> Constant
// Insert /remove from beginning - O(n)-> Linear
// Access - O(1) -> Constant
// Search - O(n) -> Linear
// Push / Pop - O(1)-> Constant
// shift/unshift/ concat/ Slice /Spice - O(n) -> Linear
// forEach/map/filter/reduce -> O(n) -> Linear


  // Object.key() .values() .entries()
  
  // BIG O for OBJECT
  /** 
  Insert - O(1) -> constant
  Remove - O(1) -> constant
  Access - O(1) -> constant
  Search - O(n) -> linear
  Object.keys() - O(n) -> linear
  Object.values() - O(n) -> linear
  Object.entries() - O(n) -> linear
  */